[tool.poetry]
name = "bayesianInference"
version = "0.1.0"
description = "Virtual Environment Bayesian Inference"
authors = ["mori@socar.kr"]
[tool.poetry.dependencies]
python = "3.10.6" 
cachetools = ">=4.2.1"
cloudpickle = "*"  # 버전을 명시하지 않으면 최신 버전이 사용됩니다.
fastprogress = ">=0.2.0"
numpy = ">=1.15.0"
pandas = ">=0.24.0"
pytensor = ">=2.19,<2.20"  # 오타 주의: 'pytensor'가 아닌 올바른 패키지 이름을 사용해야 합니다. (예: 'tensorflow' or 'pytorch')
typing-extensions = ">=3.7.4"
empiricaldist = "^0.7.2"
seaborn = "^0.13.2"
statsmodels = "^0.14.1"
jupyter = "^1.0.0"
ipykernel = "^6.29.4"
pymc = "^5.12.0"
graphviz = "^0.20.3"
arviz = "^0.18.0"
torch = "^2.2.2"

[tool.pytest.ini_options]
testpaths = ["tests"]
minversion = "6.0"
xfail_strict = true
addopts = ["--color=yes"]

[tool.ruff]
line-length = 100
target-version = "py39"
exclude = ["versioneer.py"]

[tool.ruff.lint]
select = ["D", "E", "F", "I", "UP", "W", "RUF"]
ignore-init-module-imports = true
ignore = [
  "E501",
  "F841", # Local variable name is assigned to but never used
  "RUF001", # String contains ambiguous character (such as Greek letters)
  "RUF002", # Docstring contains ambiguous character (such as Greek letters)
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D107",
  "D200",
  "D202",
  "D203",
  "D204",
  "D205",
  "D209",
  "D212",
  "D213",
  "D301",
  "D400",
  "D401",
  "D403",
  "D413",
  "D415",
  "D417",
]

[tool.ruff.lint.isort]
lines-between-types = 1

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
  "F401", # Module imported but unused
  "F403", # 'from module import *' used; unable to detect undefined names
]
"docs/source/*" = ["D"]
"pymc/__init__.py" = [
  "E402", # Module level import not at top of file
]
"pymc/stats/__init__.py" = [
  "E402", # Module level import not at top of file
]
"pymc/logprob/__init__.py" = [
  "I001", # Import block is un-sorted or un-formatted
]
"tests/*" = ["D"]

[tool.coverage.report]
exclude_lines = [
  "pragma: nocover",
  "raise NotImplementedError",
  "if TYPE_CHECKING:",
]

[tool.coverage.run]
omit = ["*examples*"]
